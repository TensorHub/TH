name: Monthly Assessment

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      month:
        description: "Target month (YYYY-MM)"
        required: false
  schedule:
    - cron: '0 6 1 * *'
  push:
    paths:
      - 'assessments/responses/**'
      - 'assessments/monthly/**'

jobs:
  build-and-render:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml matplotlib numpy
      - name: Resolve month
        id: dt
        run: |
          if [ -n "${{ github.event.inputs.month }}" ]; then
            echo "month=${{ github.event.inputs.month }}" >> $GITHUB_OUTPUT
          else
            echo "month=$(date +'%Y-%m')" >> $GITHUB_OUTPUT
          fi
      - name: Fetch responses from issue (if missing)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const month = process.env.MONTH;
            const out = `assessments/responses/${month}.json`;
            if (fs.existsSync(out)) {
              core.info(`Responses file exists: ${out}`);
              return;
            }
            const titleTag = `Assessment: ${month}`;
            const { data: issues } = await github.rest.issues.listForRepo({ owner: context.repo.owner, repo: context.repo.repo, labels: 'assessment', state: 'all', per_page: 100 });
            const issue = issues.find(i => i.title.includes(month));
            if (!issue) { core.info(`No issue for ${month}`); return; }
            let body = issue.body || '';
            // Try to extract ```json ... ```
            let match = body.match(/```json\s*([\s\S]*?)```/i) || body.match(/```\s*([\s\S]*?)```/i);
            let jsonText = match ? match[1].trim() : body.trim();
            try { JSON.parse(jsonText); } catch { core.info('Body not valid JSON'); return; }
            fs.mkdirSync('assessments/responses', { recursive: true });
            fs.writeFileSync(out, jsonText, 'utf8');
            core.info(`Wrote responses to ${out}`);
        env:
          MONTH: ${{ steps.dt.outputs.month }}
      - name: Score assessment
        run: |
          python scripts/score_assessment.py \
            --month "${{ steps.dt.outputs.month }}" \
            --repo-root .
      - name: Render radar
        run: |
          python scripts/render_radar.py \
            --scores assessments/scores/radar_${{ steps.dt.outputs.month }}.json
      - name: Copy latest alias
        run: |
          mkdir -p assessments/charts
          cp assessments/charts/radar_${{ steps.dt.outputs.month }}.png assessments/charts/radar_latest.png
      - name: Commit artifacts
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(assessment): update radar for ${{ steps.dt.outputs.month }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          file_pattern: |
            assessments/scores/*.json
            assessments/charts/*.png
